        -:    0:Source:A:/Take/Prac_5/COS214_Prac5/LockAllDoorsCommand.h
        -:    0:Graph:A:\Take\Prac_5\COS214_Prac5\cmake-build-debug-coverage\CMakeFiles\COS214_Prac5.dir\main.cpp.gcno
        -:    0:Data:A:\Take\Prac_5\COS214_Prac5\cmake-build-debug-coverage\CMakeFiles\COS214_Prac5.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef PRAC_5_LOCKALLDOORSCOMMAND_H
        -:    2:#define PRAC_5_LOCKALLDOORSCOMMAND_H
        -:    3:
        -:    4:#include "Command.h"
        -:    5:#include "Room.h"
        -:    6:
        -:    7:/**
        -:    8: * @class LockAllDoorsCommand
        -:    9: * @brief Command class to lock all doors in a specified room.
        -:   10: *
        -:   11: * This class implements the Command interface, providing a concrete command
        -:   12: * for locking all doors within a specified room. The command encapsulates
        -:   13: * the action of locking doors, allowing it to be executed within the context
        -:   14: * of a macro routine or directly by a command invoker.
        -:   15: */
        -:   16:class LockAllDoorsCommand : public Command {
        -:   17:private:
        -:   18:    Room* room; ///< Pointer to the Room where doors will be locked.
        -:   19:
        -:   20:public:
        -:   21:    /**
        -:   22:     * @brief Constructor to initialize the command with a specific room.
        -:   23:     *
        -:   24:     * @param room Pointer to the Room object where the command will act.
        -:   25:     */
function _ZN19LockAllDoorsCommandC1EP4Room called 1 returned 100% blocks executed 100%
        1:   26:    LockAllDoorsCommand(Room* room) : room(room) {}
        1:   26-block  0
call    0 returned 1
        -:   27:
        -:   28:    /**
        -:   29:     * @brief Execute the command to lock all doors in the room.
        -:   30:     *
        -:   31:     * This method overrides the pure virtual execute method from the Command
        -:   32:     * interface. It calls the performAction method on the specified room
        -:   33:     * with the action "Lock", effectively locking all doors in that room.
        -:   34:     */
function _ZN19LockAllDoorsCommand7executeEv called 2 returned 100% blocks executed 62%
        2:   35:    void execute() override {
        4:   36:        room->performAction("Lock");
        2:   36-block  0
        2:   36-block  1
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   36-block  2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   36-block  3
call    6 returned 2
    $$$$$:   36-block  4
call    7 never executed
    $$$$$:   36-block  5
        2:   37:    }
        -:   38:
        -:   39:    /**
        -:   40:     * @brief Destructor for LockAllDoorsCommand.
        -:   41:     *
        -:   42:     * The destructor is defined but does not perform any specific actions.
        -:   43:     */
        2:   44:    ~LockAllDoorsCommand() {}
------------------
_ZN19LockAllDoorsCommandD0Ev:
function _ZN19LockAllDoorsCommandD0Ev called 1 returned 100% blocks executed 100%
        1:   44:    ~LockAllDoorsCommand() {}
        1:   44-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN19LockAllDoorsCommandD1Ev:
function _ZN19LockAllDoorsCommandD1Ev called 1 returned 100% blocks executed 100%
        1:   44:    ~LockAllDoorsCommand() {}
        1:   44-block  0
call    0 returned 1
------------------
        -:   45:};
        -:   46:
        -:   47:#endif // PRAC_5_LOCKALLDOORSCOMMAND_H
